# fundamentos_estructura
import static calculadora1.Calculadora1.factorial;

public class Operation
{
    public Operation(){}
public int suma(int number1,int number2)
{
    return number1 + number2;
}
public int resta(int number1,int number2)
{
    return number1 - number2;
}
public int multiplicacion(int number1,int number2)
{ 
    int result=0;
    for(int i=0;i<number2;i++)
    {
        result=suma(result,number1);
    }
    return result;
}
public double  division(int number1,int number2)
{
  if(number2!=0)
  {
      return number1/number2;
  }
  else
  {
   return Double.NaN;   //no hya numero 
  }
}
public int modulo(int number1,int number2)
{
    return number1 % number2;
}
public int potencia(int base,int exponente)
{
    if(exponente==1)
    {
        return base;
    }
    else
    {
        if(exponente>1)
        {
            return base* potencia(base,exponente-1);
        }
        else
        {
            if(exponente==0)
            {
                return 1;
            }
            else
            {
             return 1/potencia(base,exponente*(-1));   
            }
        }
    }
}
public static int factorial(int x){
        
        if(x == 0){
            return 1;
        }
        else if(x>0){
            return (int)(x * factorial(x-1));
        }
        return 0;
    }
 public double[]ecuacion_cuadratica(int a,int b,int c)
 { 
     double[]roots=new double [2];
     int temp_term1,temp_term2;
     if(a!=0)
     {
         temp_term1=this.potencia(b,2);
         temp_term2=4*a*c;
         if(temp_term1<temp_term2)
         {
             return null;
         }
         else
         {
            roots[0]=(b + Math.sqrt(temp_term1 - temp_term2))/(2*a); 
            roots[1]=(b - Math.sqrt(temp_term1 - temp_term2))/(2*a); 
            return roots;
         }
     }
     else
     {
         return null;
     }
   
 }
 public static double seno(int x)
    {
        return Math.sin((x* Math.PI)/ 180);
    }
 public double coseno (double y) 
    {
        return Math.cos(y);     
    }
public double integral (double inicio, double fin, double paso)
    {
        double acumuladora = 0; 
        for (double i = inicio; i< fin; i+=paso)
        {
            acumuladora +=(paso * potencia((int) i, 2)); 
        }
        return acumuladora; 
    }
 public double [] ecucuadratica (double a, double b, double c)
    {  
        double []resultado = new double [2];
        double numero = ((b*b))-(4*(a*c)); //potencia y multiplicación de la fórmula
        if (numero>=0 || a>0)
        {
            resultado [0]= ((-b) + Math.sqrt(numero))/(2*a); 
            resultado [1] = ((-b) - Math.sqrt(numero))/(2*a);     
        }
        else {
            System.out.println("no hay ....");
        }
          
        return resultado;         
    }
   public double metodoPi (double numTer)
    {
        double sumaPi = 0, termino; 
        int denominador = 1, contador = 0, signo = 1; 
        while (contador < numTer){
            if (denominador % 2 !=0){
                termino = (double) 4 / denominador * signo; 
                sumaPi = sumaPi + termino; 
                signo = signo * -1; 
                contador++;
            }
            denominador++;     
        }
        return sumaPi; 
    } 

}
  
